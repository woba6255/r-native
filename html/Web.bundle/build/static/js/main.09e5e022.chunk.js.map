{"version":3,"sources":["modules/fetch/index.js","modules/fetch/api/metrics.js","modules/router/RoterMap.jsx","components/table-editor/TableAliases.js","components/table-editor/TableReducer/TableReducer.js","components/table-editor/TableReducer/TableReducerContext.js","components/table-editor/TableCell.jsx","components/table-editor/ActionsMenu.jsx","components/table-editor/TableRow.jsx","components/table-editor/TableComponent.jsx","components/table-editor/index.jsx","modules/metrics/TableSchema.js","modules/metrics/MetricsTable.jsx","modules/metrics/MetricsGraphic.jsx","modules/metrics/Metrics.jsx","modules/nav-bar/NavBar.jsx","components/page.jsx","views/metrics/index.jsx","views/index.jsx","modules/router/MainRouter.jsx","modules/router/MainRouterAliases.js","App.js","serviceWorker.js","index.js","modules/fetch/api/index.js"],"names":["bridge","key","a","data","window","ReactNativeWebView","Error","Promise","resolve","hash","Math","random","toString","substring","json","JSON","stringify","postMessage","ReactNativeWebViewResponse","response","MetricsManager","ID","newValue","RouteWithSubRoutes","route","path","exact","render","props","component","routes","RenderRoutes","map","i","TABLE_ROW_STATUS_EDIT","TABLE_ROW_STATUS_CREATED","defaultValue","TableReducer","state","action","type","payload","stableStateChangeEmitter","id","Object","assign","index","findIndex","element","push","splice","toSave","schema","eventsMiddleware","onStableStateChange","AppContext","React","createContext","ProviderTableContext","children","useReducer","dispatch","Provider","value","useTableContext","useContext","TableCell","cellSchema","cellState","onCellChange","editing","role","styles","formater","eventToCellChange","e","target","RoleStatic","style","RoleInput","onChange","RoleTextArea","RoleDate","s","date","onChange1","RoleDefault","Table","TextCell","TextInput","width","Textarea","marginTop","marginBottom","minHeight","heigth","resize","selected","Date","parse","customInput","timeIntervals","timeFormat","showTimeSelect","DateInput","onClick","this","Component","editBtnWidth","maxWidth","ActionsMenu","menuItems","Popover","position","Position","BOTTOM_LEFT","content","Menu","Group","item","Item","title","MoreIcon","cursor","Row","rowID","rowStatus","setEditingRow","useState","getRowStateFromTableState","rowState","setRowState","find","row","MID","middlewareFunction","rowActions","status","onSaveNewRow","middlewareResponse","onDdleteNewRow","onDelete","onSave","icon","color","onSelect","on","filter","length","includes","height","body","newCellValue","newRowValue","Cell","DotIcon","TableCreator","editingRow","useEffect","tableActions","onRowCreate","startValue","editAfterCreate","Head","tableColumn","TextHeaderCell","header","Body","overflowY","Pane","display","alignItems","justifyContent","margin","Button","AddIcon","TableEditor","setMetrics","tableData","editOne","then","r","console","log","deleteOneByID","createOne","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","dateFormater","MetricsTable","metrics","MetricsGraphic","ref","createRef","labels","temperature","Chart","current","getContext","datasets","label","options","Metrics","tableState","setTableState","getAll","NavBar","history","useHistory","elevation","padding","majorScale","appearance","intent","minorScale","ROUTE_INDEX","ROUTE_METRICS","PageBasic","borderLeft","paddingY","paddingX","marginX","Page","MainRouter","App","Boolean","location","hostname","match","lalala","mess","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.09e5e022.chunk.js","sourcesContent":["export async function bridge(key, data = '') {\r\n\tif (!window.ReactNativeWebView) {\r\n\t\tthrow Error('[ERR] Used outside React Native Webview!')\r\n\t}\r\n\r\n\r\n\treturn await new Promise(resolve => {\r\n\t\tconst hash = Math.random().toString(36).substring(7) + Math.random().toString(36).substring(7)\r\n\t\tconst json = JSON.stringify({key, data, hash})\r\n\r\n\t\twindow.ReactNativeWebView.postMessage(json)\r\n\t\t// const interval = setInterval(() => {\r\n\t\t// \twindow.ReactNativeWebView.postMessage(json)\r\n\t\t// }, 750)\r\n\t\tif (!window.ReactNativeWebViewResponse) {\r\n\t\t\twindow.ReactNativeWebViewResponse = {}\r\n\t\t}\r\n\r\n\t\twindow.ReactNativeWebViewResponse[hash] = (response) => {\r\n\t\t\tresolve(response)\r\n\t\t\t// clearInterval(interval)\r\n\t\t\twindow.ReactNativeWebViewResponse[hash] = null\r\n\r\n\t\t}\r\n\t})\r\n}\r\n\r\n\r\n// import { config } from \"config\"\r\n//\r\n//\r\n// export default {\r\n// \tasync GET(path, json = true, url = config.url) {\r\n// \t\ttry {\r\n// \t\t\tconst response = await fetch(url + path, {\r\n// \t\t\t\tmethod: 'GET',\r\n// \t\t\t});\r\n//\r\n// \t\t\treturn json === true\r\n// \t\t\t\t? await response.json()\r\n// \t\t\t\t: response\r\n// \t\t} catch (error) {\r\n// \t\t\tthrow new Error(error)\r\n// \t\t}\r\n// \t},\r\n// \tasync DELETE(path, json = true, url = config.url) {\r\n// \t\ttry {\r\n// \t\t\tconst response = await fetch(url + path, {\r\n// \t\t\t\tmethod: 'DELETE',\r\n// \t\t\t});\r\n//\r\n// \t\t\treturn json === true\r\n// \t\t\t\t? await response.json()\r\n// \t\t\t\t: response\r\n// \t\t} catch (error) {\r\n// \t\t\tthrow new Error(error)\r\n// \t\t}\r\n// \t},\r\n// \tasync POST(path, data, json = true, url = config.url) {\r\n// \t\ttry {\r\n// \t\t\tconst response = await fetch(url + path, {\r\n// \t\t\t\tmethod: 'POST',\r\n// \t\t\t\tbody: JSON.stringify(data),\r\n// \t\t\t\theaders: {\r\n// \t\t\t\t\t\"Content-type\": \"application/json; charset=UTF-8\"\r\n// \t\t\t\t}\r\n// \t\t\t});\r\n//\r\n// \t\t\treturn json === true\r\n// \t\t\t\t? await response.json()\r\n// \t\t\t\t: response\r\n// \t\t} catch (error) {\r\n// \t\t\tthrow new Error(error)\r\n// \t\t}\r\n// \t},\r\n// \tasync PUT(path, data, json = true, url = config.url) {\r\n// \t\ttry {\r\n// \t\t\tconst response = await fetch(url + path, {\r\n// \t\t\t\tmethod: 'PATCH',\r\n// \t\t\t\tbody: JSON.stringify(data),\r\n// \t\t\t\theaders: {\r\n// \t\t\t\t\t\"Content-type\": \"application/json; charset=UTF-8\"\r\n// \t\t\t\t}\r\n// \t\t\t});\r\n//\r\n// \t\t\treturn json === true\r\n// \t\t\t\t? await response.json()\r\n// \t\t\t\t: response\r\n// \t\t} catch (error) {\r\n// \t\t\tthrow new Error(error)\r\n// \t\t}\r\n// \t}\r\n// }\r\n","import { bridge } from '../index'\r\n\r\n\r\nexport class MetricsManager {\r\n\tstatic async getAll() {\r\n\t\t// TODO validate\r\n\t\t// throw Error(a)\r\n\t\treturn await bridge('GET_ALL_METRICS')\r\n\t}\r\n\r\n\tstatic async createOne(data) {\r\n\t\t// TODO validate\r\n\t\treturn await bridge('CREATE_METRIC', data)\r\n\t}\r\n\r\n\tstatic async deleteOneByID(ID) {\r\n\t\t// TODO validate\r\n\t\treturn await bridge('DELETE_METRIC_BY_ID', ID)\r\n\t}\r\n\r\n\tstatic async editOne(newValue) {\r\n\t\t// TODO validate\r\n\t\treturn await bridge('EDIT_METRIC_BY_ID', newValue)\r\n\t}\r\n}\r\n","import React from \"react\"\r\nimport { Route, Switch } from \"react-router\"\r\n\r\n\r\n\r\nfunction RouteWithSubRoutes(route) {\r\n\treturn (\r\n\t\t<Route\r\n\t\t\tpath={route.path}\r\n\t\t\texact={route.exact}\r\n\t\t\trender={props => <route.component {...props} routes={route.routes} />}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport function RenderRoutes({ routes }) {\r\n\treturn (\r\n\t\t<Switch>\r\n\t\t\t{routes.map((route, i) => {\r\n\t\t\t\treturn <RouteWithSubRoutes key={route.key} {...route} />;\r\n\t\t\t})}\r\n\t\t\t<Route component={() => <h1>404 Not Found!</h1>} />\r\n\t\t</Switch>\r\n\t);\r\n}\r\n\r\n// export function displayRouteMenu(routes) {\r\n//\r\n// \treturn (\r\n// \t\t<ul>\r\n// \t\t\t{routes.map(route => {\r\n// \t\t\t\tif (route.routes) {\r\n// \t\t\t\t\treturn (\r\n// \t\t\t\t\t\t<Fragment key={route.key}>\r\n// \t\t\t\t\t\t\t{singleRoute(route)}\r\n// \t\t\t\t\t\t\t{displayRouteMenu(route.routes)}\r\n// \t\t\t\t\t\t</Fragment>\r\n// \t\t\t\t\t);\r\n// \t\t\t\t}\r\n//\r\n// \t\t\t\t// no nested routes, so just render a single route\r\n// \t\t\t\treturn singleRoute(route);\r\n// \t\t\t})}\r\n// \t\t</ul>\r\n// \t);\r\n// }\r\n","export const TABLE_CELL_ROLE_ID = 'ID'\r\nexport const TABLE_CELL_ROLE_STATIC = 'STATIC'\r\nexport const TABLE_CELL_ROLE_INPUT = 'INPUT'\r\nexport const TABLE_CELL_ROLE_TEXT_AREA = 'TEXT_AREA'\r\nexport const TABLE_CELL_ROLE_DATE = 'DATE'\r\n\r\n\r\n\r\nexport const TABLE_ROW_STATUS_EDIT = 'EDIT'\r\nexport const TABLE_ROW_STATUS_CREATED = 'CREATED'\r\nexport const TABLE_ROW_STATUS_STATIC = 'STATIC'\r\nexport const TABLE_ROW_STATUS_STATIC_DISABLED = 'STATIC_DISABLED'\r\n\r\n\r\n\r\nexport const TABLE_REDUCER_UPDATE = 'UPDATE'\r\nexport const TABLE_REDUCER_SAVE_ROW = 'SAVE_ROW'\r\nexport const TABLE_REDUCER_CREATE_ROW = 'CREATE_ROW'\r\nexport const TABLE_REDUCER_DELETE_ROW = 'DELETE_ROW'\r\nexport const TABLE_REDUCER_DELETE_CREATE_ROW = 'DELETE_CREATE_ROW'\r\n","import {\r\n\tTABLE_REDUCER_CREATE_ROW, TABLE_REDUCER_DELETE_CREATE_ROW,\r\n\tTABLE_REDUCER_DELETE_ROW,\r\n\tTABLE_REDUCER_SAVE_ROW,\r\n\tTABLE_REDUCER_UPDATE\r\n} from '../TableAliases'\r\n\r\n\r\nconst defaultValue = {}\r\n\r\n\r\nconst TableReducer = (state, action) => {\r\n\tconst type = action.type || TABLE_REDUCER_UPDATE\r\n\tconst payload = action.payload || action\r\n\tswitch (type) {\r\n\t\tcase TABLE_REDUCER_UPDATE: {\r\n\t\t\treturn stableStateChangeEmitter({\r\n\t\t\t\t...state,\r\n\t\t\t\t...payload\r\n\t\t\t}, state)\r\n\t\t}\r\n\t\tcase TABLE_REDUCER_SAVE_ROW: {\r\n\t\t\tconst {id} = payload\r\n\t\t\tconst data = Object.assign([], state.data)\r\n\t\t\tconst index = data.findIndex((element) => {\r\n\t\t\t\treturn element.id === id\r\n\t\t\t})\r\n\t\t\tdata[index] = Object.assign({}, data[index], action.payload)\r\n\t\t\treturn stableStateChangeEmitter({\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t}, state)\r\n\t\t}\r\n\t\tcase TABLE_REDUCER_CREATE_ROW: {\r\n\t\t\tconst data = Object.assign([], state.data)\r\n\t\t\tdata.push(payload)\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase TABLE_REDUCER_DELETE_ROW: {\r\n\t\t\tconst data = Object.assign([], state.data)\r\n\t\t\tconst index = data.findIndex((element) => {\r\n\t\t\t\treturn element.id === payload\r\n\t\t\t})\r\n\t\t\tdata.splice(index, 1)\r\n\r\n\t\t\treturn stableStateChangeEmitter({\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t}, state)\r\n\t\t}\r\n\t\tcase TABLE_REDUCER_DELETE_CREATE_ROW: {\r\n\t\t\tconst data = Object.assign([], state.data)\r\n\t\t\tconst index = data.findIndex((element) => {\r\n\t\t\t\treturn element.id === payload\r\n\t\t\t})\r\n\t\t\tdata.splice(index, 1)\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t}\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\treturn state\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction stableStateChangeEmitter(toSave, state) {\r\n\tif (state.schema && state.schema.eventsMiddleware.onStableStateChange) state.schema.eventsMiddleware.onStableStateChange(toSave.data)\r\n\treturn toSave\r\n}\r\n\r\nexport {\r\n\tdefaultValue,\r\n\tTableReducer\r\n}\r\n\r\n","import React from 'react'\r\nimport { TableReducer, defaultValue } from './TableReducer'\r\n\r\nconst AppContext = React.createContext()\r\n\r\nfunction ProviderTableContext({ children }) {\r\n\tconst [state, dispatch] = React.useReducer(TableReducer, defaultValue)\r\n\treturn <AppContext.Provider value={{ state, dispatch }}>{children}</AppContext.Provider>\r\n}\r\n\r\n\r\nconst useTableContext = () => React.useContext(AppContext)\r\n\r\nexport {\r\n\tProviderTableContext,\r\n\tuseTableContext,\r\n}\r\n","import React from \"react\"\r\nimport { Table, Textarea, TextInput } from \"evergreen-ui\"\r\nimport DatePicker from \"react-datepicker\"\r\nimport {\r\n\tTABLE_CELL_ROLE_DATE,\r\n\tTABLE_CELL_ROLE_ID,\r\n\tTABLE_CELL_ROLE_INPUT,\r\n\tTABLE_CELL_ROLE_STATIC,\r\n\tTABLE_CELL_ROLE_TEXT_AREA\r\n} from \"./TableAliases\"\r\n\r\n\r\nexport function TableCell({ cellSchema, cellState = '', onCellChange, editing }) {\r\n\tconst { role, styles, formater } = cellSchema\r\n\tconst value =\r\n\t\tformater\r\n\t\t\t? formater(cellState)\r\n\t\t\t: cellState\r\n\r\n\tfunction eventToCellChange(e) {\r\n\t\tonCellChange(e.target.value)\r\n\t}\r\n\r\n\tswitch (role) {\r\n\t\tcase TABLE_CELL_ROLE_ID:\r\n\t\tcase TABLE_CELL_ROLE_STATIC:\r\n\t\t\treturn <RoleStatic style={styles} value={value}/>\r\n\t\tcase TABLE_CELL_ROLE_INPUT:\r\n\t\t\treturn <RoleInput style={styles} editing={editing} onChange={e => eventToCellChange(e)} value={value}/>\r\n\t\tcase TABLE_CELL_ROLE_TEXT_AREA:\r\n\t\t\treturn <RoleTextArea style={styles} editing={editing} onChange={e => eventToCellChange(e)} value={value}/>\r\n\t\tcase TABLE_CELL_ROLE_DATE:\r\n\t\t\treturn <RoleDate style={styles} editing={editing} s={cellState} onChange={(date) => onCellChange(date)}\r\n\t\t\t                 date={value} onChange1={e => eventToCellChange(e)}/>\r\n\t\tdefault:\r\n\t\t\treturn <RoleDefault style={styles}/>\r\n\t}\r\n}\r\n\r\n\r\nfunction RoleInput(props) {\r\n\treturn <Table.TextCell\r\n\t\tstyle={props.style}\r\n\t>\r\n\t\t{\r\n\t\t\tprops.editing === true\r\n\t\t\t\t? (\r\n\t\t\t\t\t<TextInput\r\n\t\t\t\t\t\twidth=\"100%\"\r\n\t\t\t\t\t\tonChange={props.onChange}\r\n\t\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t\t: props.value\r\n\t\t}\r\n\t</Table.TextCell>\r\n}\r\n\r\nfunction RoleTextArea(props) {\r\n\treturn <Table.TextCell\r\n\t\tstyle={props.style}\r\n\t>\r\n\t\t{\r\n\t\t\tprops.editing === true\r\n\t\t\t\t? (\r\n\t\t\t\t\t<Textarea\r\n\t\t\t\t\t\tstyle={{ marginTop: \"10px\", marginBottom: \"10px\" }}\r\n\t\t\t\t\t\tminHeight=\"auto\"\r\n\t\t\t\t\t\theigth=\"10px\"\r\n\t\t\t\t\t\twidth=\"100%\"\r\n\t\t\t\t\t\tresize=\"vertical\"\r\n\t\t\t\t\t\tonChange={props.onChange}\r\n\t\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t\t: props.value\r\n\t\t}\r\n\r\n\t</Table.TextCell>\r\n}\r\n\r\nfunction RoleDefault(props) {\r\n\treturn <Table.TextCell\r\n\t\tstyle={props.style}\r\n\t>\r\n\t\tNot found(\r\n\t</Table.TextCell>\r\n}\r\n\r\n\r\nfunction RoleStatic(props) {\r\n\treturn <Table.TextCell\r\n\t\tstyle={props.style}\r\n\t>\r\n\t\t{\r\n\t\t\tprops.value\r\n\t\t}\r\n\t</Table.TextCell>\r\n}\r\n\r\n\r\nfunction RoleDate(props) {\r\n\treturn <Table.TextCell\r\n\t\tstyle={props.style}\r\n\t>\r\n\t\t{\r\n\t\t\tprops.editing === true\r\n\t\t\t\t? (\r\n\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\tselected={Date.parse(props.s)}\r\n\t\t\t\t\t\tonChange={props.onChange}\r\n\t\t\t\t\t\tcustomInput={<DateInput date={props.date} onChange={props.onChange1}/>}\r\n\t\t\t\t\t\ttimeIntervals={1}\r\n\t\t\t\t\t\ttimeFormat=\"HH:mm\"\r\n\t\t\t\t\t\tshowTimeSelect\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t\t: props.date\r\n\t\t}\r\n\r\n\t</Table.TextCell>\r\n}\r\n\r\n\r\n\r\nclass DateInput extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<TextInput\r\n\t\t\t\tonClick={this.props.onClick}\r\n\t\t\t\tonChange={(e) => this.props.onChange(e)}\r\n\t\t\t\tvalue={this.props.date}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\n// class DateInput({ date, onClick, onChange }) {\r\n// \treturn (\r\n//\r\n// \t)\r\n// }\r\n\r\n","import { Menu, MoreIcon, Popover, Position } from \"evergreen-ui\"\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nActionsMenu.propTypes = {\r\n\tmenuItems: PropTypes.array.isRequired\r\n}\r\n\r\nexport const editBtnWidth = { maxWidth: '4rem' }\r\n\r\nexport function ActionsMenu({ menuItems }) {\r\n\t// TODO: refactor\r\n\treturn <Popover\r\n\t\tposition={Position.BOTTOM_LEFT}\r\n\t\t// isShown={showMenu}\r\n\t\tcontent={\r\n\t\t\t<Menu>\r\n\t\t\t\t<Menu.Group>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// TODO: Refactor ActionsMenu\r\n\t\t\t\t\t\tmenuItems.map(item =>\r\n\t\t\t\t\t\t\t<Menu.Item {...item} key={item.title}>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\titem.title\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t</Menu.Group>\r\n\t\t\t</Menu>\r\n\t\t}\r\n\t>\r\n\t\t<MoreIcon\r\n\t\t\tstyle={{ cursor: \"pointer\" }}\r\n\t\t\t// onClick={setShowMenu(true)}\r\n\t\t/>\r\n\t</Popover>\r\n}\r\n","import React, { useState } from \"react\"\r\nimport { DotIcon, Table } from \"evergreen-ui\"\r\nimport { useTableContext } from \"./TableReducer\"\r\nimport { TableCell } from \"./TableCell\"\r\nimport { ActionsMenu, editBtnWidth } from \"./ActionsMenu\"\r\nimport {\r\n\tTABLE_ROW_STATUS_CREATED,\r\n\tTABLE_ROW_STATUS_EDIT,\r\n\tTABLE_ROW_STATUS_STATIC, TABLE_ROW_STATUS_STATIC_DISABLED,\r\n\tTABLE_REDUCER_DELETE_ROW, TABLE_REDUCER_SAVE_ROW, TABLE_REDUCER_DELETE_CREATE_ROW\r\n} from \"./TableAliases\"\r\n\r\nexport function Row({ rowID, schema, rowStatus, setEditingRow }) {\r\n\tconst { state, dispatch } = useTableContext()\r\n\tconst { eventsMiddleware } = state.schema\r\n\tconst [rowState, setRowState] = useState(getRowStateFromTableState())\r\n\r\n\tfunction getRowStateFromTableState() {\r\n\t\treturn state.data.find(row => row.id === rowID)\r\n\t}\r\n\r\n\tasync function MID(middlewareFunction, value) {\r\n\t\tif (middlewareFunction) return await middlewareFunction(value)\r\n\t\telse return value\r\n\t}\r\n\r\n\r\n\tconst rowActions = {\r\n\t\tback() {\r\n\t\t\tsetRowState(getRowStateFromTableState())\r\n\t\t\tsetEditingRow(null)\r\n\t\t},\r\n\t\tedit() {\r\n\t\t\tsetEditingRow({ id: rowID, status: TABLE_ROW_STATUS_EDIT })\r\n\t\t},\r\n\t\tcancel() {\r\n\t\t\tsetEditingRow(null)\r\n\t\t},\r\n\t\tasync saveNewRow() {\r\n\t\t\tsetEditingRow(null)\r\n\t\t\tconst middlewareResponse = await MID(eventsMiddleware.onSaveNewRow, rowState)\r\n\t\t\tdispatch({ type: TABLE_REDUCER_SAVE_ROW, payload: middlewareResponse })\r\n\t\t},\r\n\t\tasync deleteNewRow() {\r\n\t\t\tconst middlewareResponse = await MID(eventsMiddleware.onDdleteNewRow, rowState.id)\r\n\t\t\tif (rowStatus !== TABLE_ROW_STATUS_STATIC) setEditingRow(null)\r\n\t\t\tdispatch({ type: TABLE_REDUCER_DELETE_CREATE_ROW, payload: middlewareResponse })\r\n\t\t},\r\n\t\tasync delete() {\r\n\t\t\tconst middlewareResponse = await MID(eventsMiddleware.onDelete, rowState.id)\r\n\t\t\tif (rowStatus !== TABLE_ROW_STATUS_STATIC) setEditingRow(null)\r\n\t\t\tdispatch({ type: TABLE_REDUCER_DELETE_ROW, payload: middlewareResponse })\r\n\t\t},\r\n\t\tasync save() {\r\n\t\t\tsetEditingRow(null)\r\n\t\t\tconst middlewareResponse = await MID(eventsMiddleware.onSave, rowState)\r\n\t\t\tdispatch({ type: TABLE_REDUCER_SAVE_ROW, payload: middlewareResponse })\r\n\t\t},\r\n\t}\r\n\r\n\r\n\tconst menuItemsMap = [\r\n\t\t{\r\n\t\t\ticon: \"edit\", title: 'Edit',\r\n\t\t\tcolor: \"muted\", style: { cursor: \"pointer\" },\r\n\t\t\tonSelect: () => rowActions.edit(),\r\n\t\t\ton: [TABLE_ROW_STATUS_STATIC]\r\n\t\t},\r\n\t\t{\r\n\t\t\ticon: \"tick-circle\", title: 'Save',\r\n\t\t\tonSelect: () => rowActions.save(),\r\n\t\t\ton: [TABLE_ROW_STATUS_EDIT]\r\n\t\t},\r\n\t\t{\r\n\t\t\ticon: \"tick-circle\", title: 'Create',\r\n\t\t\tonSelect: () => rowActions.saveNewRow(),\r\n\t\t\ton: [TABLE_ROW_STATUS_CREATED]\r\n\t\t},\r\n\t\t{\r\n\t\t\ticon: \"cross\", title: 'Cancel',\r\n\t\t\tonSelect: () => rowActions.cancel(),\r\n\t\t\ton: [TABLE_ROW_STATUS_EDIT]\r\n\t\t},\r\n\t\t{\r\n\t\t\ticon: \"arrow-left\", title: 'Return',\r\n\t\t\tonSelect: () => rowActions.back(),\r\n\t\t\ton: [TABLE_ROW_STATUS_EDIT]\r\n\t\t},\r\n\t\t{\r\n\t\t\ticon: \"trash\", title: 'Delete',\r\n\t\t\tonSelect: () => rowActions.delete(),\r\n\t\t\ton: [TABLE_ROW_STATUS_EDIT, TABLE_ROW_STATUS_STATIC]\r\n\t\t},\r\n\t\t{\r\n\t\t\ticon: \"trash\", title: 'Delete',\r\n\t\t\tonSelect: () => rowActions.deleteNewRow(),\r\n\t\t\ton: [TABLE_ROW_STATUS_CREATED]\r\n\t\t},\r\n\t]\r\n\r\n\tconst menuItems = menuItemsMap.filter((item) => item.on.length === 0 || item.on.includes(rowStatus))\r\n\r\n\treturn (\r\n\t\t<Table.Row height={'auto'} style={{ minHeight: '45px' }}>\r\n\t\t\t{\r\n\t\t\t\tschema.body.map(cellSchema => {\r\n\t\t\t\t\tconst { key } = cellSchema\r\n\t\t\t\t\tconst cellState = rowState[key]\r\n\t\t\t\t\tconst editing = [TABLE_ROW_STATUS_EDIT, TABLE_ROW_STATUS_CREATED].includes(rowStatus)\r\n\r\n\t\t\t\t\tfunction onCellChange(newCellValue) {\r\n\t\t\t\t\t\tconst newRowValue = Object.assign({}, rowState)\r\n\t\t\t\t\t\tnewRowValue[key] = newCellValue\r\n\t\t\t\t\t\tsetRowState(newRowValue)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<TableCell key={key} cellState={cellState} onCellChange={onCellChange} cellSchema={cellSchema}\r\n\t\t\t\t\t\t           editing={editing}/>\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\t<Table.Cell style={editBtnWidth}>\r\n\t\t\t\t{\r\n\t\t\t\t\t(rowStatus === TABLE_ROW_STATUS_STATIC_DISABLED)\r\n\t\t\t\t\t\t? <DotIcon />\r\n\t\t\t\t\t\t: <ActionsMenu menuItems={menuItems}/>\r\n\t\t\t\t}\r\n\t\t\t</Table.Cell>\r\n\t\t</Table.Row>\r\n\t)\r\n}\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { AddIcon, Button, Pane, Table, } from \"evergreen-ui\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useTableContext } from \"./TableReducer\"\r\nimport { Row } from \"./TableRow\"\r\nimport { editBtnWidth } from \"./ActionsMenu\"\r\nimport {\r\n\tTABLE_ROW_STATUS_CREATED,\r\n\tTABLE_ROW_STATUS_STATIC,\r\n\tTABLE_ROW_STATUS_STATIC_DISABLED, TABLE_REDUCER_CREATE_ROW\r\n} from \"./TableAliases\"\r\n\r\n\r\nexport function TableCreator({ data, schema }) {\r\n\t// TODO: validate all table-editor\r\n\tconst [editingRow, setEditingRow] = useState(null)\r\n\tconst { state, dispatch } = useTableContext()\r\n\tconst { eventsMiddleware } = schema\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch({ schema, data })\r\n\t}, [])\r\n\r\n\t// Emit on row lvl\r\n\tconst tableActions = {\r\n\t\tasync createRow() {\r\n\t\t\tconst [startValue, editAfterCreate] = eventsMiddleware.onRowCreate()\r\n\t\t\tif (startValue && startValue.id && editAfterCreate) setEditingRow({\r\n\t\t\t\tid: startValue.id,\r\n\t\t\t\tstatus: TABLE_ROW_STATUS_CREATED\r\n\t\t\t})\r\n\t\t\tdispatch({ type: TABLE_REDUCER_CREATE_ROW, payload: startValue })\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\tstate.data\r\n\t\t\t? <div>\r\n\t\t\t\t<Table>\r\n\t\t\t\t\t<Table.Head>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tschema.body.map((tableColumn, i) => (\r\n\t\t\t\t\t\t\t\t<Table.TextHeaderCell\r\n\t\t\t\t\t\t\t\t\tstyle={tableColumn.styles}\r\n\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttableColumn.header\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</Table.TextHeaderCell>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<Table.TextHeaderCell\r\n\t\t\t\t\t\t\tstyle={editBtnWidth}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t</Table.TextHeaderCell>\r\n\t\t\t\t\t</Table.Head>\r\n\t\t\t\t\t<Table.Body style={{ overflowY: 'scroll' }}>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstate.data && state.data.map(row => {\r\n\t\t\t\t\t\t\t\tconst rowStatus = (editingRow && row.id === editingRow.id)\r\n\t\t\t\t\t\t\t\t\t? editingRow.status\r\n\t\t\t\t\t\t\t\t\t: (editingRow === null)\r\n\t\t\t\t\t\t\t\t\t\t? TABLE_ROW_STATUS_STATIC\r\n\t\t\t\t\t\t\t\t\t\t: TABLE_ROW_STATUS_STATIC_DISABLED\r\n\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<Row key={row.id} rowID={row.id} schema={schema} rowStatus={rowStatus}\r\n\t\t\t\t\t\t\t\t\t     setEditingRow={setEditingRow}/>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Table.Body>\r\n\t\t\t\t</Table>\r\n\t\t\t\t<Pane\r\n\t\t\t\t\tdisplay=\"flex\"\r\n\t\t\t\t\talignItems=\"center\"\r\n\t\t\t\t\tjustifyContent=\"center\"\r\n\t\t\t\t\tmargin=\"7px\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\teditingRow === null\r\n\t\t\t\t\t\t&& <Button onClick={() => tableActions.createRow()}><AddIcon/></Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Pane>\r\n\t\t\t</div>\r\n\t\t\t: <p>No data...</p>\r\n\t)\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { ProviderTableContext } from \"./TableReducer\"\r\nimport { TableCreator } from \"./TableComponent\"\r\nexport * from './TableAliases'\r\n\r\nexport function TableEditor(props) {\r\n\treturn (\r\n\t\t<ProviderTableContext>\r\n\t\t\t<TableCreator {...props} />\r\n\t\t</ProviderTableContext>\r\n\t)\r\n}\r\n","import { MetricsManager } from \"modules/fetch/api\"\r\nimport { TABLE_CELL_ROLE_DATE, TABLE_CELL_ROLE_INPUT } from \"components/table-editor/TableAliases\"\r\n\r\n\r\n\r\nconst width = { maxWidth: '5rem' }\r\n\r\nexport function schema ({ setMetrics }){\r\n\treturn {\r\n\t\teventsMiddleware: {\r\n\t\t\tonStableStateChange(tableData) {\r\n\t\t\t\tsetMetrics(tableData)\r\n\t\t\t},\r\n\t\t\tonSave: (data) => {\r\n\t\t\t\tMetricsManager.editOne(data).then(r => console.log('Saved!'))\r\n\t\t\t\treturn data\r\n\t\t\t},\r\n\t\t\t\tonDelete: (ID) => {\r\n\t\t\t\tMetricsManager.deleteOneByID(ID).then(r => console.log('DELETED!'))\r\n\t\t\t\treturn ID\r\n\t\t\t},\r\n\t\t\t\tonSaveNewRow: (data) => {\r\n\t\t\t\tMetricsManager.createOne(data).then(r => console.log('Saved!'))\r\n\t\t\t\treturn data\r\n\t\t\t},\r\n\t\t\t\tonRowCreate: () => [{\r\n\t\t\t\tid: Math.random().toString(36).substring(7),\r\n\t\t\t\tdate: new Date(),\r\n\t\t\t}, true],\r\n\t\t},\r\n\t\tbody: [\r\n\t\t\t// { header: '#', styles: idWidth, key: 'id', role: TABLE_CELL_ROLE_ID },\r\n\t\t\t{ header: 'Date', key: 'date', role: TABLE_CELL_ROLE_DATE, formater: (date) => dateFormater(date) },\r\n\t\t\t{ header: '°С', styles: width, key: 'temperature', role: TABLE_CELL_ROLE_INPUT },\r\n\t\t],\r\n\t}\r\n}\r\n\r\nfunction dateFormater(date) {\r\n\tif (date) {\r\n\t\treturn new Intl.DateTimeFormat('ru', {\r\n\t\t\tyear: 'numeric', month: 'numeric', day: 'numeric',\r\n\t\t\thour: 'numeric', minute: 'numeric',\r\n\t\t\thour12: false\r\n\t\t})\r\n\t\t\t.format(Date.parse(date))\r\n\t} else {\r\n\t\treturn 'No Date detected'\r\n\t}\r\n\r\n}\r\n","import React from \"react\"\r\nimport { TableEditor } from \"components/table-editor\"\r\nimport { schema } from \"modules/metrics/TableSchema\"\r\n\r\n\r\n\r\nexport function MetricsTable(props) {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\tprops.metrics.length\r\n\t\t\t\t\t? <TableEditor\r\n\t\t\t\t\t\tdata={props.metrics}\r\n\t\t\t\t\t\tschema={schema(props)}/>\r\n\t\t\t\t\t: <p>Waiting...</p>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, { createRef, useEffect } from 'react'\r\nimport Chart from 'chart.js'\r\n\r\n\r\nexport function MetricsGraphic({metrics}) {\r\n\tconst ref = createRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (metrics.length) {\r\n\t\t\tconst labels = metrics.map((e) =>\r\n\t\t\t\tnew Intl.DateTimeFormat('ru', {\r\n\t\t\t\t\tyear: '2-digit',\r\n\t\t\t\t\tmonth: 'numeric', day: 'numeric',\r\n\t\t\t\t\thour: 'numeric', minute: 'numeric',/* second: 'numeric',*/\r\n\t\t\t\t\thour12: false\r\n\t\t\t\t})\r\n\t\t\t\t\t.format(\r\n\t\t\t\t\t\tDate.parse(e.date)\r\n\t\t\t\t\t)\r\n\t\t\t)\r\n\t\t\tconst data = metrics.map((e) => e.temperature)\r\n\t\t\tnew Chart(ref.current.getContext('2d'), {\r\n\t\t\t\ttype: 'line',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tlabels: labels,\r\n\t\t\t\t\tdatasets: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlabel: 'Temperature',\r\n\t\t\t\t\t\t\tdata: data\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\toptions: {}\r\n\t\t\t})\r\n\t\t}\r\n\t}, [metrics])\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<canvas id=\"myChart\" ref={ref}/>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { MetricsTable } from \"modules/metrics/MetricsTable\"\r\nimport { MetricsManager } from \"modules/fetch/api\"\r\nimport { MetricsGraphic } from \"modules/metrics/MetricsGraphic\"\r\nimport { Pane } from \"evergreen-ui\"\r\n\r\n\r\nexport function Metrics() {\r\n\tconst [metrics, setMetrics] = useState([])\r\n\tconst [tableState, setTableState] = useState(metrics)\r\n\tuseEffect(() => {\r\n\t\tMetricsManager.getAll().then(data => {\r\n\t\t\tsetMetrics(data)\r\n\t\t\tsetTableState(data)\r\n\t\t})\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<MetricsTable metrics={tableState} setMetrics={setMetrics}/>\r\n\t\t\t<MetricsGraphic metrics={metrics} setMetrics={setMetrics}/>\r\n\t\t</>\r\n\t)\r\n}\r\n","import React from \"react\"\r\nimport { Button, majorScale, minorScale, Pane } from \"evergreen-ui\"\r\nimport { useHistory } from \"react-router\"\r\nimport { ROUTE_INDEX, ROUTE_METRICS, ROUTE_POST_EDITOR } from \"modules/router\"\r\n\r\n\r\nexport function NavBar() {\r\n\tconst history = useHistory()\r\n\treturn (\r\n\t\t<Pane marginBottom={10} elevation={2} padding={12}>\r\n\t\t\t<Button height={majorScale(5)} appearance=\"minimal\" intent=\"warning\" margin={minorScale(1)} onClick={() => history.push(ROUTE_INDEX)}>Home</Button>\r\n\t\t\t<Button height={majorScale(5)} appearance=\"minimal\" intent=\"warning\" margin={minorScale(1)} onClick={() => history.push(ROUTE_METRICS)}>METRICS</Button>\r\n\t\t</Pane>\r\n\t)\r\n}\r\n","import React from \"react\"\r\nimport { Pane } from \"evergreen-ui\"\r\n\r\nexport function PageBasic({ children }) {\r\n\treturn (\r\n\t\t<Pane elevation={1} borderLeft='5px solid #dae4fc' style={{}} paddingY={'1rem'} paddingX={'1rem'} marginX={'1rem'}>\r\n\t\t\t{children}\r\n\t\t</Pane>\r\n\t)\r\n\r\n}\r\n","import React from \"react\"\r\nimport { ROUTE_METRICS } from \"modules/router\"\r\nimport { Metrics } from \"modules/metrics/Metrics\"\r\nimport { NavBar } from \"modules/nav-bar/NavBar\"\r\nimport { PageBasic } from \"components/page\"\r\n\r\nexport function IndexViewGraphTable() {\r\n\treturn [\r\n\t\t{ path: ROUTE_METRICS, key: \"Index\", exact: true, component: Page },\r\n\t\t// routerGraph(),\r\n\t]\r\n}\r\n\r\nfunction Page() {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<NavBar/>\r\n\t\t\t{/*<PageBasic>*/}\r\n\t\t\t\t<Metrics/>\r\n\t\t\t{/*</PageBasic>*/}\r\n\t\t</>\r\n\t)\r\n}\r\n","import React from \"react\"\r\nimport { ROUTE_INDEX, ROUTE_METRICS, ROUTE_POST_EDITOR, RenderRoutes } from \"modules/router\"\r\nimport { IndexViewGraphTable } from \"views/metrics\"\r\nimport { NavBar } from \"modules/nav-bar/NavBar\"\r\nimport { PageBasic } from \"components/page\"\r\n\r\n\r\nexport function routerIndex() {\r\n\treturn [\r\n\t\t{ path: ROUTE_INDEX, key: \"ROOT\", exact: true, component: Page },\r\n\t\t{ path: ROUTE_METRICS, key: \"GT\", component: RenderRoutes, routes: IndexViewGraphTable() },\r\n\t]\r\n}\r\n\r\nfunction Page() {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<NavBar />\r\n\t\t\t<PageBasic>\r\n\t\t\t\t<p>Home!!!</p>\r\n\t\t\t</PageBasic>\r\n\t\t</>\r\n\t)\r\n}\r\n","import React from \"react\"\r\nimport { HashRouter } from \"react-router-dom\"\r\nimport { RenderRoutes } from \"modules/router/RoterMap\"\r\nimport { routerIndex } from \"views\"\r\n\r\nexport function MainRouter({ children }) {\r\n\treturn (\r\n\t\t<HashRouter>\r\n\t\t\t<RenderRoutes routes={routerIndex()} />\r\n\t\t\t{children}\r\n\t\t</HashRouter>\r\n\t)\r\n}\r\n","export const ROUTE_INDEX = '/'\r\nexport const ROUTE_POST_EDITOR = '/post-editor'\r\nexport const ROUTE_METRICS = '/metrics'\r\nexport const ROUTE_CREATE_GRAPH_FROM_METRICS = ROUTE_METRICS + '/graph'\r\n","import React from 'react'\r\nimport { MainRouter } from 'modules/router'\r\n\r\nfunction App() {\r\n\t// const appStyles = {\r\n\t// \tzoom: 1.6\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<MainRouter/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nwindow.lalala = ((mess) => {\r\n    throw Error(mess)\r\n})\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export * from './posts'\r\nexport * from './metrics'\r\n"],"sourceRoot":""}